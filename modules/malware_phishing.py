#!/usr/bin/env python3
"""
Argus - Advanced Malware & Phishing Check
Fixed version with proper Unicode encoding handling for Windows
"""

import os
import sys
import requests
import asyncio
import aiohttp
from bs4 import BeautifulSoup
from rich.console import Console
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn
from colorama import Fore, init
from urllib.parse import urlparse
import base64
import dns.resolver
import platform

# Add parent directory to path for imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from utils.util import clean_domain_input, clean_url, make_request, log_message
from config.settings import API_KEYS

# Initialize colorama for Windows compatibility
init(autoreset=True)

# Create console with proper encoding handling for Windows
if platform.system() == "Windows":
    # Force UTF-8 encoding on Windows to handle Unicode characters
    console = Console(force_terminal=True, legacy_windows=False)
    # Set console encoding to UTF-8 if possible
    try:
        if hasattr(sys.stdout, 'reconfigure'):
            sys.stdout.reconfigure(encoding='utf-8')
        if hasattr(sys.stderr, 'reconfigure'):
            sys.stderr.reconfigure(encoding='utf-8')
    except:
        pass
else:
    console = Console()

def banner():
    console.print(Fore.GREEN + """
    =============================================
          Argus - Advanced Malware & Phishing Check
    =============================================
    """)

def heuristic_analysis(url):
    """Perform heuristic analysis on URL patterns"""
    suspicious_patterns = ["login", "secure", "account", "update", "verify", "signin", "admin"]
    console.print(Fore.YELLOW + "[*] Performing heuristic analysis...")
    try:
        parsed_url = urlparse(url)
        path = parsed_url.path.lower()
        if any(pattern in path for pattern in suspicious_patterns):
            console.print(Fore.RED + "[!] Suspicious keywords detected in URL path.")
            log_message("malware_phishing.log", "Suspicious keywords detected in URL path.")
        else:
            console.print(Fore.GREEN + "[+] No suspicious keywords found in URL path.")
            log_message("malware_phishing.log", "No suspicious keywords found in URL path.")
    except Exception as e:
        console.print(Fore.RED + f"[!] Error during heuristic analysis: {e}")
        log_message("malware_phishing.log", f"Error during heuristic analysis: {e}")

async def check_urlhaus_async(session, url):
    """Async URLhaus check"""
    console.print(Fore.YELLOW + "[*] Checking URLhaus...")
    try:
        api_url = "https://urlhaus-api.abuse.ch/v1/url/"
        payload = {
            'url': url,
            'format': 'json'
        }
        headers = {
            'Content-Type': 'application/x-www-form-urlencoded'
        }
        
        async with session.post(api_url, headers=headers, data=payload, timeout=10) as response:
            if response.status == 200:
                data = await response.json()
                if data.get("query_status") == "ok" and data.get("url_info"):
                    console.print(Fore.RED + "[!] URL detected as malicious by URLhaus.")
                    log_message("malware_phishing.log", "URL detected as malicious by URLhaus.")
                else:
                    console.print(Fore.GREEN + "[+] URL not found in URLhaus database.")
                    log_message("malware_phishing.log", "URL not found in URLhaus database.")
            else:
                console.print(Fore.RED + f"[!] URLhaus check failed with status code {response.status}.")
                log_message("malware_phishing.log", f"URLhaus check failed with status code {response.status}.")
    except asyncio.TimeoutError:
        console.print(Fore.RED + "[!] URLhaus check timed out.")
        log_message("malware_phishing.log", "URLhaus check timed out.")
    except Exception as e:
        console.print(Fore.RED + f"[!] Error during URLhaus check: {e}")
        log_message("malware_phishing.log", f"Error during URLhaus check: {e}")

def check_blacklist_services(url):
    """Check against DNS blacklist services"""
    console.print(Fore.YELLOW + "[*] Checking against public blacklist services...")
    try:
        parsed_url = urlparse(url)
        domain = parsed_url.netloc
        
        # Get IP address for the domain
        ip_response = make_request(f"http://api.ipify.org?format=json")
        if ip_response:
            ip = ip_response.json().get("ip")
            if not ip:
                console.print(Fore.RED + "[!] Unable to retrieve IP address.")
                log_message("malware_phishing.log", "Unable to retrieve IP address.")
                return
                
            # Check DNSBL services
            reversed_ip = '.'.join(ip.split('.')[::-1])
            dnsbl_domains = ["zen.spamhaus.org", "b.barracudacentral.org"]
            listed = False
            
            for dnsbl in dnsbl_domains:
                query = f"{reversed_ip}.{dnsbl}"
                try:
                    answers = dns.resolver.resolve(query, 'A')
                    for rdata in answers:
                        if rdata.address.startswith("127."):
                            console.print(Fore.RED + f"[!] IP {ip} is listed in {dnsbl}.")
                            log_message("malware_phishing.log", f"IP {ip} is listed in {dnsbl}.")
                            listed = True
                except (dns.resolver.NXDOMAIN, dns.resolver.NoAnswer):
                    continue
                except Exception as e:
                    console.print(Fore.RED + f"[!] DNS query error for {dnsbl}: {e}")
                    log_message("malware_phishing.log", f"DNS query error for {dnsbl}: {e}")
                    
            if not listed:
                console.print(Fore.GREEN + "[+] IP not found in public blacklist services.")
                log_message("malware_phishing.log", "IP not found in public blacklist services.")
        else:
            console.print(Fore.RED + "[!] Unable to retrieve IP address for blacklist check.")
            log_message("malware_phishing.log", "Unable to retrieve IP address for blacklist check.")
    except Exception as e:
        console.print(Fore.RED + f"[!] Error during blacklist services check: {e}")
        log_message("malware_phishing.log", f"Error during blacklist services check: {e}")

async def check_virustotal_async(session, url):
    """Async VirusTotal check"""
    console.print(Fore.YELLOW + "[*] Checking VirusTotal...")
    try:
        api_key = API_KEYS.get("VIRUSTOTAL_API_KEY")
        if not api_key:
            console.print(Fore.RED + "[!] VirusTotal API key not configured.")
            log_message("malware_phishing.log", "VirusTotal API key not configured.")
            return
            
        # Step 1: Submit the URL to VirusTotal for analysis
        scan_url = "https://www.virustotal.com/api/v3/urls"
        payload = {'url': url}
        headers = {
            'x-apikey': api_key,
            'Content-Type': 'application/x-www-form-urlencoded'
        }
        
        async with session.post(scan_url, headers=headers, data=payload, timeout=10) as response:
            if response.status in [200, 201]:
                data = await response.json()
                analysis_id = data['data']['id']
                
                # Step 2: Retrieve the analysis report
                analysis_url = f"https://www.virustotal.com/api/v3/analyses/{analysis_id}"
                
                async with session.get(analysis_url, headers=headers, timeout=10) as analysis_response:
                    if analysis_response.status == 200:
                        analysis_data = await analysis_response.json()
                        stats = analysis_data['data']['attributes']['stats']
                        malicious = stats.get('malicious', 0)
                        
                        if malicious > 0:
                            console.print(Fore.RED + f"[!] VirusTotal detected {malicious} malicious sources.")
                            log_message("malware_phishing.log", f"VirusTotal detected {malicious} malicious sources.")
                        else:
                            console.print(Fore.GREEN + "[+] VirusTotal found no malicious sources.")
                            log_message("malware_phishing.log", "VirusTotal found no malicious sources.")
                    else:
                        console.print(Fore.RED + f"[!] VirusTotal analysis failed with status code {analysis_response.status}.")
                        log_message("malware_phishing.log", f"VirusTotal analysis failed with status code {analysis_response.status}.")
            else:
                console.print(Fore.RED + f"[!] VirusTotal scan failed with status code {response.status}.")
                log_message("malware_phishing.log", f"VirusTotal scan failed with status code {response.status}.")
                
    except asyncio.TimeoutError:
        console.print(Fore.RED + "[!] VirusTotal check timed out.")
        log_message("malware_phishing.log", "VirusTotal check timed out.")
    except Exception as e:
        console.print(Fore.RED + f"[!] Error during VirusTotal check: {e}")
        log_message("malware_phishing.log", f"Error during VirusTotal check: {e}")

def additional_heuristic_checks(url):
    """Perform additional heuristic security checks"""
    console.print(Fore.YELLOW + "[*] Performing additional heuristic checks...")
    try:
        parsed_url = urlparse(url)
        if parsed_url.scheme != "https":
            console.print(Fore.RED + "[!] URL does not use HTTPS. Potential security risk.")
            log_message("malware_phishing.log", "URL does not use HTTPS.")
        else:
            console.print(Fore.GREEN + "[+] URL uses HTTPS.")
            log_message("malware_phishing.log", "URL uses HTTPS.")
    except Exception as e:
        console.print(Fore.RED + f"[!] Error during additional heuristic checks: {e}")
        log_message("malware_phishing.log", f"Error during additional heuristic checks: {e}")

async def comprehensive_analysis(target):
    """Comprehensive async analysis with progress tracking"""
    try:
        # Use a simple text-based progress indicator for Windows compatibility
        if platform.system() == "Windows":
            # Simple text-based progress for Windows
            console.print(Fore.CYAN + "[*] Starting comprehensive malware analysis...")
            
            async with aiohttp.ClientSession() as session:
                # Run heuristic analysis first (synchronous)
                heuristic_analysis(target)
                additional_heuristic_checks(target)
                check_blacklist_services(target)
                
                console.print(Fore.CYAN + "[*] Running async checks...")
                
                # Run async checks
                await check_urlhaus_async(session, target)
                await check_virustotal_async(session, target)
                
            console.print(Fore.CYAN + "[*] Analysis complete.")
        else:
            # Use Rich Progress for non-Windows systems
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=console,
                transient=True
            ) as progress:
                task = progress.add_task("[cyan]Analyzing malware threats...", total=5)
                
                async with aiohttp.ClientSession() as session:
                    # Heuristic analysis
                    progress.update(task, description="[cyan]Running heuristic analysis...")
                    heuristic_analysis(target)
                    progress.advance(task)
                    
                    # Additional checks
                    progress.update(task, description="[cyan]Additional security checks...")
                    additional_heuristic_checks(target)
                    progress.advance(task)
                    
                    # Blacklist services
                    progress.update(task, description="[cyan]Checking blacklist services...")
                    check_blacklist_services(target)
                    progress.advance(task)
                    
                    # URLhaus check
                    progress.update(task, description="[cyan]Checking URLhaus...")
                    await check_urlhaus_async(session, target)
                    progress.advance(task)
                    
                    # VirusTotal check
                    progress.update(task, description="[cyan]Checking VirusTotal...")
                    await check_virustotal_async(session, target)
                    progress.advance(task)
                    
    except Exception as e:
        console.print(Fore.RED + f"[!] Error during comprehensive analysis: {e}")
        log_message("malware_phishing.log", f"Error during comprehensive analysis: {e}")
        raise

def check_malware_phishing(url):
    """Legacy synchronous malware checking function"""
    heuristic_analysis(url)
    additional_heuristic_checks(url)
    check_blacklist_services(url)
    
    # For sync version, use basic requests for URLhaus and VirusTotal
    console.print(Fore.YELLOW + "[*] Checking URLhaus...")
    try:
        api_url = "https://urlhaus-api.abuse.ch/v1/url/"
        payload = {'url': url, 'format': 'json'}
        headers = {'Content-Type': 'application/x-www-form-urlencoded'}
        response = requests.post(api_url, headers=headers, data=payload, timeout=10)
        
        if response and response.status_code == 200:
            data = response.json()
            if data.get("query_status") == "ok" and data.get("url_info"):
                console.print(Fore.RED + "[!] URL detected as malicious by URLhaus.")
                log_message("malware_phishing.log", "URL detected as malicious by URLhaus.")
            else:
                console.print(Fore.GREEN + "[+] URL not found in URLhaus database.")
                log_message("malware_phishing.log", "URL not found in URLhaus database.")
        else:
            console.print(Fore.RED + f"[!] URLhaus check failed with status code {response.status_code if response else 'No Response'}.")
    except Exception as e:
        console.print(Fore.RED + f"[!] Error during URLhaus check: {e}")
    
    # VirusTotal sync check
    console.print(Fore.YELLOW + "[*] Checking VirusTotal...")
    try:
        api_key = API_KEYS.get("VIRUSTOTAL_API_KEY")
        if not api_key:
            console.print(Fore.RED + "[!] VirusTotal API key not configured.")
            log_message("malware_phishing.log", "VirusTotal API key not configured.")
            return
            
        scan_url = "https://www.virustotal.com/api/v3/urls"
        payload = {'url': url}
        headers = {
            'x-apikey': api_key,
            'Content-Type': 'application/x-www-form-urlencoded'
        }
        
        response = requests.post(scan_url, headers=headers, data=payload, timeout=10)
        if response and response.status_code in [200, 201]:
            data = response.json()
            analysis_id = data['data']['id']
            
            analysis_url = f"https://www.virustotal.com/api/v3/analyses/{analysis_id}"
            analysis_response = requests.get(analysis_url, headers=headers, timeout=10)
            
            if analysis_response and analysis_response.status_code == 200:
                analysis_data = analysis_response.json()
                stats = analysis_data['data']['attributes']['stats']
                malicious = stats.get('malicious', 0)
                
                if malicious > 0:
                    console.print(Fore.RED + f"[!] VirusTotal detected {malicious} malicious sources.")
                    log_message("malware_phishing.log", f"VirusTotal detected {malicious} malicious sources.")
                else:
                    console.print(Fore.GREEN + "[+] VirusTotal found no malicious sources.")
                    log_message("malware_phishing.log", "VirusTotal found no malicious sources.")
            else:
                console.print(Fore.RED + f"[!] VirusTotal analysis failed with status code {analysis_response.status_code if analysis_response else 'No Response'}.")
                log_message("malware_phishing.log", f"VirusTotal analysis failed with status code {analysis_response.status_code if analysis_response else 'No Response'}.")
        else:
            console.print(Fore.RED + f"[!] VirusTotal scan failed with status code {response.status_code if response else 'No Response'}.")
            log_message("malware_phishing.log", f"VirusTotal scan failed with status code {response.status_code if response else 'No Response'}.")
    except Exception as e:
        console.print(Fore.RED + f"[!] Error during VirusTotal check: {e}")
        log_message("malware_phishing.log", f"Error during VirusTotal check: {e}")

def display_malware_phishing():
    """Display completion message"""
    console.print(Fore.CYAN + "\n[*] Malware & Phishing checks completed.\n")

async def main(target):
    """Async main function with comprehensive analysis"""
    try:
        banner()
        target = clean_url(clean_domain_input(target))
        console.print(Fore.WHITE + f"[*] Checking for malware and phishing threats for: {target}")
        
        # Run comprehensive analysis
        await comprehensive_analysis(target)
        display_malware_phishing()
        
    except Exception as e:
        console.print(Fore.RED + f"\n[!] Error during analysis: {e}")
        log_message("malware_phishing.log", f"Error during analysis: {e}")

def main_sync(target):
    """Synchronous main function for compatibility"""
    banner()
    target = clean_url(clean_domain_input(target))
    console.print(Fore.WHITE + f"[*] Checking for malware and phishing threats for: {target}")
    check_malware_phishing(target)
    display_malware_phishing()

if __name__ == "__main__":
    if len(sys.argv) > 1:
        try:
            target = sys.argv[1]
            
            # Check if we should use async version
            use_async = "--async" in sys.argv or "-a" in sys.argv
            
            if use_async:
                asyncio.run(main(target))
            else:
                main_sync(target)
                
        except KeyboardInterrupt:
            console.print(Fore.RED + "\n[!] Process interrupted by user.")
            sys.exit(1)
        except Exception as e:
            console.print(Fore.RED + f"\n[!] Unexpected error: {e}")
            sys.exit(1)
    else:
        console.print(Fore.RED + "[!] No target provided. Please pass a domain or URL.")
        console.print(Fore.WHITE + "Usage: python malware_phishing.py <target> [--async]")
        sys.exit(1)