#!/usr/bin/env python3
"""
CMS Vulnerability Scanner Module
Identifies and tests Content Management Systems (WordPress, Drupal, Joomla) for 
known vulnerabilities in core installations, plugins, and themes.
"""

import os
import sys
import requests
import json
import re
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed
from urllib.parse import urljoin, urlparse

# Fix encoding issues for Windows
if sys.platform.startswith('win'):
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')

# Add parent directory for imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from utils.util import clean_domain_input
    from config.settings import USER_AGENT, DEFAULT_TIMEOUT
except ImportError:
    # Fallback implementations
    def clean_domain_input(domain):
        """Clean domain input"""
        if not domain:
            return ""
        domain = domain.strip().lower()
        domain = domain.replace('http://', '').replace('https://', '')
        domain = domain.replace('www.', '')
        if '/' in domain:
            domain = domain.split('/')[0]
        return domain
    
    USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
    DEFAULT_TIMEOUT = 10

# Import findings system
try:
    from config.findings_rules import evaluate_findings, display_findings_result
    FINDINGS_AVAILABLE = True
except ImportError:
    print("[W] Findings system not available - running in legacy mode")
    FINDINGS_AVAILABLE = False

def get_cms_signatures():
    """Get CMS detection signatures"""
    return {
        "WordPress": {
            "signatures": [
                r"wp-content",
                r"wp-includes",
                r"wp-admin",
                r"WordPress",
                r"wp-json",
                r"wp-login.php",
                r"wp-config.php",
                r"wp-settings.php"
            ],
            "version_patterns": [
                r'<meta name="generator" content="WordPress ([^"]+)"',
                r'<meta name="generator" content="WordPress ([^"]+)"',
                r'wp-content/themes/[^/]+/style\.css.*?Version:\s*([^\n]+)',
                r'wp-includes/js/wp-emoji-release\.min\.js\?ver=([^&]+)'
            ],
            "admin_paths": [
                "/wp-admin/",
                "/wp-admin/index.php",
                "/wp-login.php",
                "/wp-admin/admin.php"
            ],
            "vulnerable_versions": [
                {"version": "5.8.0", "cve": "CVE-2021-29447", "description": "Object injection vulnerability"},
                {"version": "5.7.0", "cve": "CVE-2021-29450", "description": "XSS vulnerability"},
                {"version": "5.6.0", "cve": "CVE-2021-29447", "description": "Object injection vulnerability"}
            ]
        },
        "Drupal": {
            "signatures": [
                r"Drupal",
                r"drupal",
                r"sites/default",
                r"modules/system",
                r"themes/seven",
                r"CHANGELOG\.txt",
                r"drupal\.js"
            ],
            "version_patterns": [
                r'<meta name="generator" content="Drupal ([^"]+)"',
                r'Drupal ([0-9.]+)',
                r'CHANGELOG\.txt.*?Drupal ([0-9.]+)'
            ],
            "admin_paths": [
                "/user/login",
                "/admin/",
                "/admin/index.php",
                "/user/1"
            ],
            "vulnerable_versions": [
                {"version": "9.1.0", "cve": "CVE-2021-29450", "description": "XSS vulnerability"},
                {"version": "8.9.0", "cve": "CVE-2021-29447", "description": "Object injection vulnerability"},
                {"version": "7.0", "cve": "CVE-2021-29450", "description": "XSS vulnerability"}
            ]
        },
        "Joomla": {
            "signatures": [
                r"Joomla",
                r"joomla",
                r"components/com_",
                r"modules/mod_",
                r"plugins/",
                r"templates/",
                r"configuration.php",
                r"htaccess.txt"
            ],
            "version_patterns": [
                r'<meta name="generator" content="Joomla! ([^"]+)"',
                r'Joomla! ([0-9.]+)',
                r'configuration\.php.*?public \$version = \'([^\']+)\''
            ],
            "admin_paths": [
                "/administrator/",
                "/administrator/index.php",
                "/admin/",
                "/admin/index.php"
            ],
            "vulnerable_versions": [
                {"version": "4.0.0", "cve": "CVE-2021-29450", "description": "XSS vulnerability"},
                {"version": "3.9.0", "cve": "CVE-2021-29447", "description": "Object injection vulnerability"},
                {"version": "3.8.0", "cve": "CVE-2021-29450", "description": "XSS vulnerability"}
            ]
        }
    }

def detect_cms(target):
    """Detect CMS type and version"""
    protocols = ["https", "http"]
    
    for protocol in protocols:
        base_url = f"{protocol}://{target}"
        
        try:
            headers = {
                'User-Agent': USER_AGENT,
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            }
            
            response = requests.get(base_url, headers=headers, timeout=DEFAULT_TIMEOUT, verify=False)
            content = response.text
            
            cms_signatures = get_cms_signatures()
            
            for cms_name, cms_info in cms_signatures.items():
                # Check for CMS signatures
                for signature in cms_info["signatures"]:
                    if re.search(signature, content, re.IGNORECASE):
                        # Found CMS, now detect version
                        version = None
                        for pattern in cms_info["version_patterns"]:
                            match = re.search(pattern, content, re.IGNORECASE)
                            if match:
                                version = match.group(1)
                                break
                        
                        return {
                            "cms": cms_name,
                            "version": version,
                            "url": base_url,
                            "detected": True
                        }
        
        except Exception as e:
            continue
    
    return {"cms": "Unknown", "version": None, "detected": False}

def check_cms_vulnerabilities(cms_info):
    """Check for known vulnerabilities in detected CMS"""
    vulnerabilities = []
    
    if not cms_info["detected"]:
        return vulnerabilities
    
    cms_name = cms_info["cms"]
    version = cms_info["version"]
    
    cms_signatures = get_cms_signatures()
    cms_data = cms_signatures.get(cms_name)
    
    if not cms_data:
        return vulnerabilities
    
    # Check for vulnerable versions
    if version:
        for vuln_info in cms_data["vulnerable_versions"]:
            vuln_version = vuln_info["version"]
            if version.startswith(vuln_version):
                vulnerabilities.append({
                    "type": "Known Vulnerability",
                    "severity": "high",
                    "description": f"Known vulnerability in {cms_name} {version}: {vuln_info['description']}",
                    "cve": vuln_info["cve"],
                    "cms": cms_name,
                    "version": version
                })
    
    # Check for admin access
    admin_paths = cms_data["admin_paths"]
    for path in admin_paths:
        try:
            url = urljoin(cms_info["url"], path)
            headers = {
                'User-Agent': USER_AGENT,
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            }
            
            response = requests.get(url, headers=headers, timeout=DEFAULT_TIMEOUT, verify=False)
            
            if response.status_code == 200:
                vulnerabilities.append({
                    "type": "Admin Access",
                    "severity": "medium",
                    "description": f"{cms_name} admin interface accessible at {path}",
                    "cms": cms_name,
                    "url": url
                })
        
        except Exception:
            continue
    
    return vulnerabilities

def scan_cms_plugins_themes(target, cms_info):
    """Scan for vulnerable plugins and themes"""
    vulnerabilities = []
    
    if not cms_info["detected"]:
        return vulnerabilities
    
    cms_name = cms_info["cms"]
    base_url = cms_info["url"]
    
    # Common plugin/theme paths
    if cms_name == "WordPress":
        paths_to_check = [
            "/wp-content/plugins/",
            "/wp-content/themes/",
            "/wp-content/uploads/",
            "/wp-content/mu-plugins/"
        ]
    elif cms_name == "Drupal":
        paths_to_check = [
            "/sites/all/modules/",
            "/sites/all/themes/",
            "/modules/",
            "/themes/"
        ]
    elif cms_name == "Joomla":
        paths_to_check = [
            "/components/",
            "/modules/",
            "/plugins/",
            "/templates/"
        ]
    else:
        return vulnerabilities
    
    for path in paths_to_check:
        try:
            url = urljoin(base_url, path)
            headers = {
                'User-Agent': USER_AGENT,
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            }
            
            response = requests.get(url, headers=headers, timeout=DEFAULT_TIMEOUT, verify=False)
            
            if response.status_code == 200:
                # Check for directory listing
                if "Index of" in response.text or "Directory listing" in response.text:
                    vulnerabilities.append({
                        "type": "Directory Listing",
                        "severity": "medium",
                        "description": f"{cms_name} directory listing enabled at {path}",
                        "cms": cms_name,
                        "url": url
                    })
                
                # Check for common vulnerable files
                vulnerable_files = [
                    "readme.txt",
                    "changelog.txt",
                    "license.txt",
                    "version.txt",
                    "config.php",
                    "configuration.php"
                ]
                
                for file in vulnerable_files:
                    file_url = urljoin(url, file)
                    try:
                        file_response = requests.get(file_url, headers=headers, timeout=DEFAULT_TIMEOUT, verify=False)
                        if file_response.status_code == 200:
                            vulnerabilities.append({
                                "type": "Information Disclosure",
                                "severity": "low",
                                "description": f"{cms_name} sensitive file accessible: {file}",
                                "cms": cms_name,
                                "url": file_url
                            })
                    except:
                        continue
        
        except Exception:
            continue
    
    return vulnerabilities

def perform_cms_vulnerability_scan(target):
    """Perform comprehensive CMS vulnerability scan"""
    print(f"[I] Starting CMS vulnerability scan for {target}")
    
    # Detect CMS
    cms_info = detect_cms(target)
    
    if not cms_info["detected"]:
        print(f"[W] No CMS detected for {target}")
        return {
            "target": target,
            "cms_detected": False,
            "vulnerabilities_found": 0,
            "scan_time": datetime.now().isoformat()
        }
    
    print(f"[I] Detected {cms_info['cms']} {cms_info['version'] or 'Unknown version'}")
    
    # Check for vulnerabilities
    cms_vulns = check_cms_vulnerabilities(cms_info)
    plugin_theme_vulns = scan_cms_plugins_themes(target, cms_info)
    
    all_vulnerabilities = cms_vulns + plugin_theme_vulns
    
    return {
        "target": target,
        "cms_detected": True,
        "cms_info": cms_info,
        "vulnerabilities_found": len(all_vulnerabilities),
        "cms_vulnerabilities": cms_vulns,
        "plugin_theme_vulnerabilities": plugin_theme_vulns,
        "vulnerabilities": all_vulnerabilities,
        "scan_time": datetime.now().isoformat()
    }

def assess_cms_vulnerability_risk(results):
    """Assess security risk level of CMS vulnerability findings"""
    findings = []
    severity = "I"
    
    vulnerabilities = results.get("vulnerabilities", [])
    cms_info = results.get("cms_info", {})
    
    if not vulnerabilities:
        return findings, severity
    
    # Count vulnerabilities by type
    known_vulns = len([v for v in vulnerabilities if v.get("type") == "Known Vulnerability"])
    admin_access = len([v for v in vulnerabilities if v.get("type") == "Admin Access"])
    directory_listing = len([v for v in vulnerabilities if v.get("type") == "Directory Listing"])
    info_disclosure = len([v for v in vulnerabilities if v.get("type") == "Information Disclosure"])
    
    # High findings - Known vulnerabilities
    if known_vulns > 0:
        severity = "H"
        findings.append(f"High-risk CMS vulnerabilities: {known_vulns} known vulnerabilities detected")
        
        # List high vulnerabilities
        high_vulns = [v for v in vulnerabilities if v.get("type") == "Known Vulnerability"]
        for vuln in high_vulns[:3]:  # Show first 3
            cms = vuln.get("cms", "Unknown")
            version = vuln.get("version", "Unknown")
            description = vuln.get("description", "No description")
            findings.append(f"High: {cms} {version} - {description}")
    
    # Medium findings - Admin access
    if admin_access > 0:
        if severity == "I":
            severity = "M"
        findings.append(f"Medium-risk CMS vulnerabilities: {admin_access} admin interfaces accessible")
    
    # Medium findings - Directory listing
    if directory_listing > 0:
        if severity == "I":
            severity = "M"
        findings.append(f"Medium-risk CMS vulnerabilities: {directory_listing} directory listings enabled")
    
    # Low findings - Information disclosure
    if info_disclosure > 0:
        if severity == "I":
            severity = "W"
        findings.append(f"Low-risk CMS vulnerabilities: {info_disclosure} information disclosure issues")
    
    # CMS-specific findings
    if cms_info.get("detected"):
        cms_name = cms_info.get("cms", "Unknown")
        version = cms_info.get("version", "Unknown")
        findings.append(f"CMS detected: {cms_name} {version}")
    
    return findings, severity

def main(target):
    """Main execution with enhanced findings evaluation"""
    print(f"[I] CMS Vulnerability Scanner - {target}")
    print("=" * 50)
    
    start_time = datetime.now()
    
    try:
        if not target:
            print("[E] FAILED: Empty target provided")
            return {
                "status": "FAILED",
                "error": "Empty target",
                "execution_time": (datetime.now() - start_time).total_seconds()
            }
        
        # Clean target input
        target = clean_domain_input(target)
        if not target:
            print("[E] FAILED: Invalid target format")
            return {
                "status": "FAILED",
                "error": "Invalid target format",
                "execution_time": (datetime.now() - start_time).total_seconds()
            }
        
        print(f"[I] Target: {target}")
        print()
        
        # Perform CMS vulnerability scan
        results = perform_cms_vulnerability_scan(target)
        execution_time = (datetime.now() - start_time).total_seconds()
        
        # Prepare scan data for findings evaluation
        vulnerabilities = results.get("vulnerabilities", [])
        cms_detected = results.get("cms_detected", False)
        cms_info = results.get("cms_info", {})
        
        scan_data = {
            "target": target,
            "cms_detected": cms_detected,
            "cms_name": cms_info.get("cms", "Unknown"),
            "cms_version": cms_info.get("version", "Unknown"),
            "vulnerabilities_found": len(vulnerabilities),
            "known_vulnerabilities": len([v for v in vulnerabilities if v.get("type") == "Known Vulnerability"]),
            "admin_access_vulnerabilities": len([v for v in vulnerabilities if v.get("type") == "Admin Access"]),
            "directory_listing_vulnerabilities": len([v for v in vulnerabilities if v.get("type") == "Directory Listing"]),
            "information_disclosure_vulnerabilities": len([v for v in vulnerabilities if v.get("type") == "Information Disclosure"]),
            "vulnerabilities": vulnerabilities,
            "status": "SUCCESS" if vulnerabilities else "NO_DATA",
            "scan_completed": True
        }
        
        if vulnerabilities:
            # Assess security risk
            security_findings, severity = assess_cms_vulnerability_risk(results)
            
            print(f"[{severity}] CMS VULNERABILITIES FOUND: {len(vulnerabilities)} security issues detected")
            
            # Display CMS information
            if cms_detected:
                cms_name = cms_info.get("cms", "Unknown")
                version = cms_info.get("version", "Unknown")
                print(f"[I] CMS: {cms_name} {version}")
                print()
            
            # Display vulnerability summary
            print(f"[{severity}] Vulnerability Summary:")
            known_count = len([v for v in vulnerabilities if v.get("type") == "Known Vulnerability"])
            admin_count = len([v for v in vulnerabilities if v.get("type") == "Admin Access"])
            dir_count = len([v for v in vulnerabilities if v.get("type") == "Directory Listing"])
            info_count = len([v for v in vulnerabilities if v.get("type") == "Information Disclosure"])
            
            if known_count > 0:
                print(f"  [H] Known Vulnerabilities: {known_count}")
            if admin_count > 0:
                print(f"  [M] Admin Access: {admin_count}")
            if dir_count > 0:
                print(f"  [M] Directory Listing: {dir_count}")
            if info_count > 0:
                print(f"  [L] Information Disclosure: {info_count}")
            print()
            
            # Display vulnerabilities
            if vulnerabilities:
                print(f"[I] VULNERABILITIES ({len(vulnerabilities)}):")
                for vuln in vulnerabilities[:10]:  # Show first 10
                    vuln_type = vuln.get("type", "Unknown")
                    description = vuln.get("description", "No description")
                    vuln_severity = vuln.get("severity", "medium")
                    
                    print(f"  [{vuln_severity.upper()}] {vuln_type}: {description}")
                
                if len(vulnerabilities) > 10:
                    print(f"  [I] ... and {len(vulnerabilities) - 10} more vulnerabilities")
                print()
            
            # Display security findings
            if security_findings:
                print(f"[{severity}] Security Risk Analysis:")
                for finding in security_findings:
                    print(f"  [{severity}] {finding}")
                print()
        else:
            if cms_detected:
                print("[I] NO DATA: CMS detected but no vulnerabilities found")
            else:
                print("[I] NO DATA: No CMS detected")
            security_findings = []
            severity = "I"
        
        print()
        
        # Enhanced findings evaluation
        if FINDINGS_AVAILABLE:
            findings_result = evaluate_findings("cms_vulnerability_scanner.py", scan_data)
            display_findings_result(scan_data, findings_result)
        else:
            # Fallback to basic assessment
            if vulnerabilities:
                findings = security_findings if security_findings else [f"Found {len(vulnerabilities)} CMS vulnerabilities"]
            else:
                findings = ["No CMS vulnerabilities detected"]
            
            findings_result = {
                "success": len(vulnerabilities) > 0,
                "severity": severity,
                "findings": findings,
                "has_findings": len(vulnerabilities) > 0,
                "category": "CMS Vulnerability Assessment"
            }
        
        print(f"[I] Execution time: {execution_time:.2f}s")
        print()
        
        # Return standardized format
        return {
            "status": "SUCCESS" if findings_result["success"] else "FAILED",
            "data": scan_data,
            "findings": findings_result,
            "execution_time": execution_time,
            "target": target,
            # Keep legacy fields for backward compatibility
            "vulnerabilities": vulnerabilities,
            "cms_detected": cms_detected,
            "severity": findings_result["severity"]
        }
        
    except KeyboardInterrupt:
        print("[I] INTERRUPTED: CMS vulnerability scan stopped by user")
        return {
            "status": "INTERRUPTED",
            "execution_time": (datetime.now() - start_time).total_seconds()
        }
        
    except Exception as e:
        execution_time = (datetime.now() - start_time).total_seconds()
        print(f"[E] FAILED: CMS vulnerability scan error - {str(e)}")
        return {
            "status": "FAILED",
            "error": str(e),
            "execution_time": execution_time
        }

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python cms_vulnerability_scanner.py <target>")
        sys.exit(1)
    
    target = sys.argv[1]
    result = main(target)
    print(json.dumps(result, indent=2)) 